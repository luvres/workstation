sudo mkfs.vfat -I /dev/sdc
sudo dd bs=4096k if=./ubuntu-20.04-live-server-amd64.iso of=/dev/sdb status=progress && sync

sudo apt update && sudo apt dist-upgrade -y
sudo apt install resolvconf build-essential -y


## DNS
# -----
sudo bash -c "echo 'nameserver 191.96.255.126' >> /etc/resolvconf/resolv.conf.d/head"
sudo service resolvconf restart


## Docker
# --------
curl -sSL https://get.docker.com | sh
sudo usermod -aG docker $USER


## docker-compose
# ---------------
sudo rm /usr/local/bin/docker-compose
# -----------
sudo curl -L https://github.com/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
# -----------
sudo chmod +x /usr/local/bin/docker-compose
# -----------
docker-compose --version


## BackUP
# --------
sudo mkdir /aux
sudo chown -R $USER. /aux/
# ---------------------------------
rsync -avz --delete --progress pi@server:/mnt/ftp/ /aux
rsync -avz --delete --progress /aux/ pi@server:/mnt/ftp


## Driver NVIDIA
# ---------------
sudo su
echo -e "blacklist nouveau\noptions nouveau modeset=0" >/etc/modprobe.d/blacklist-nouveau.conf
# ---------------------------------
sudo update-initramfs -u
# ---------------------------------
cp /aux/NVIDIA-Linux-x86_64-430.50.run .
sudo ./NVIDIA-Linux-x86_64-430.50.run


## nvidia-docker2
# ----------------
curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
# ---------------------------------
distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
# ---------------------------------
curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
# ---------------------------------
sudo apt-get update
sudo apt-get install nvidia-docker2
sudo pkill -SIGHUP dockerd

# Tests
---------------------------------
docker run --rm --runtime=nvidia nvidia/cuda:10.0-base nvidia-smi
---------------------------------
docker run --rm --device=/dev/dri -ti rocm/rocm-terminal rocm-smi # amd-rocm


## git
# -----
git config --global user.name "luvres"
git config --global user.email "luvres@hotmail.com"
git config --global credential.helper 'cache --timeout=86400'
git config --list
cat ~/.gitconfig
# ---------------------------------
ssh-keygen
cat $HOME/.ssh/id_rsa.pub | xclip -sel clip # $HOME/.ssh/config
-----------------------------------
ssh-keygen -o -a 100 -t ed25519 -f .ssh/id_ed25519 -C "luvres@desktop"
cat $HOME/.ssh/id_ed25519.pub | xclip -sel clip # $HOME/.ssh/config
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
# ---------------------------------
ssh -T git@github.com
ssh -T -p443 git@ssh.github.com



## Samba
# -------
sudo apt install samba -y

sudo cp /etc/samba/smb.conf{,.orig}
sudo cp /etc/samba/smb.conf{,.master}

sudo smbpasswd -a $USER

sudo bash -c "echo '[home]' >>/etc/samba/smb.conf.master"
sudo bash -c "echo 'comment = Home' >>/etc/samba/smb.conf.master"
sudo bash -c "echo 'path = $HOME' >>/etc/samba/smb.conf.master"
sudo bash -c "echo 'read only = no' >>/etc/samba/smb.conf.master"

sudo bash -c "testparm /etc/samba/smb.conf.master > /etc/samba/smb.conf"

sudo /etc/init.d/smbd restart


## Mount in Linux
sudo mount.cifs -o username=pi //pi/ftp /mnt/
---------------------------------
## Access
# Unix
smb://workstation/home
---------------------------------
# Windows
\\169.8.192.130\home



## docker PULL
# ------------
docker pull tensorflow/tensorflow:latest-gpu-py3-jupyter
docker pull tensorflow/tensorflow:nightly-gpu-py3-jupyter
docker pull rocm/tensorflow
docker pull rocm/rocm-terminal
docker pull nvidia/cuda:10.0-base
docker pull nvidia/cuda:10.0-cudnn7-devel
docker pull izone/spark



## pySpark
# -------------------
docker run --name Spark \
--restart=always \
--publish=8888:8888 \
--mount type=bind,src=$HOME/notebooks,dst=/root/notebooks \
-d izone/spark pyspark


docker run --rm --name Spark \
-p 8888:8888 \
-p 4040:4040 \
-v $HOME/notebooks:/root/notebooks \
-ti izone/spark pyspark



## TensorFlow NVIDIA
# -------------------
docker run --rm --runtime=nvidia --name TensorFlow \
-p 8888:8888 \
-v $HOME/notebooks:/root/notebooks \
-ti tensorflow/tensorflow:nightly-gpu-py3-jupyter \
jupyter notebook \
	--allow-root \
	--no-browser \
	--ip=0.0.0.0 \
	--port=8888 \
	--notebook-dir=/root/notebooks \
	--NotebookApp.token=''


docker run --runtime=nvidia --name TensorFlow \
--restart=always \
--publish=8888:8888 \
--mount type=bind,src=$HOME/notebooks,dst=/root/notebooks \
-d tensorflow/tensorflow:nightly-gpu-py3-jupyter \
jupyter notebook \
	--allow-root \
	--no-browser \
	--ip=0.0.0.0 \
	--port=8888 \
	--notebook-dir=/root/notebooks \
	--NotebookApp.token=''



## TensorFlow ROCm
# -----------------
docker run --rm --name TensorFlow-AMDGPU \
--network=host \
--device=/dev/kfd --device=/dev/dri \
--group-add video \
--cap-add=SYS_PTRACE \
--security-opt seccomp=unconfined \
--publish=8889:8889 \
--mount type=bind,src=$HOME/notebooks2,dst=/root/notebooks \
-ti rocm/tensorflow:rocm2.9-ub18.04-tf2.0.0-python3 \
jupyter notebook \
	--allow-root \
	--no-browser \
	--ip=0.0.0.0 \
	--port=8889 \
	--notebook-dir=/root/notebooks \
	--NotebookApp.token=''


docker run --name TensorFlow-AMDGPU \
--restart=always \
--network=host \
--device=/dev/kfd --device=/dev/dri \
--group-add video \
--cap-add=SYS_PTRACE \
--security-opt seccomp=unconfined \
--publish=8889:8889 \
--mount type=bind,src=$HOME/notebooks2,dst=/root/notebooks \
-d rocm/tensorflow:rocm2.9-ub18.04-tf2.0.0-python3 \
jupyter notebook \
	--allow-root \
	--no-browser \
	--ip=0.0.0.0 \
	--port=8889 \
	--notebook-dir=/root/notebooks \
	--NotebookApp.token=''

	
