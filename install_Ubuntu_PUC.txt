sudo apt install -y \
git build-essential resolvconf curl net-tools f2fs-tools xclip htop tmux tree zsh \
default-jdk gftp vlc gimp gdebi-core papirus-icon-theme gnome-tweak-tool \
gnome-system-monitor


## docker
# --------
curl -sSL https://get.docker.com | sh
sudo usermod -aG docker $USER


## nvidia-docker2
# ----------------
curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
# ---------------------------------
distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
# ---------------------------------
curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
# ---------------------------------
sudo apt-get update
sudo apt-get install nvidia-docker2
sudo pkill -SIGHUP dockerd


## Driver NVIDIA
# ---------------
sudo su
echo -e "blacklist nouveau\noptions nouveau modeset=0" >/etc/modprobe.d/blacklist-nouveau.conf
# ---------------------------------
sudo update-initramfs -u
sudo shutdown -r now
# ---------------------------------
sudo ./NVIDIA-Linux-x86_64-440.36.run


# Tests
---------------------------------
docker run --rm --runtime=nvidia nvidia/cuda:10.0-base nvidia-smi


## git
# -----
git config --global user.name "luvres"
git config --global user.email "luvres@hotmail.com"
git config --global credential.helper 'cache --timeout=86400'
git config --list
cat ~/.gitconfig
# ---------------------------------
ssh-keygen
cat $HOME/.ssh/id_rsa.pub | xclip -sel clip # $HOME/.ssh/config
-----------------------------------
ssh-keygen -o -a 100 -t ed25519 -f .ssh/id_ed25519 -C "luvres@desktop"
cat $HOME/.ssh/id_ed25519.pub | xclip -sel clip # $HOME/.ssh/config
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
# ---------------------------------
ssh -T git@github.com
ssh -T -p443 git@ssh.github.com
# ---------------------------------
git status
git log
git log --graph
git shortlog
git diff
git show 044b477cfce2d7ce257f93177aabbf7e9c5a6a9b
git checkout README.md # Retorna o arquivo para antes da edicao
git reset soft --mixed --hard 4362afa37fc7bc61dc7529eb0ff9f0e4125a2e84
git revert 4362afa37fc7bc61dc7529eb0ff9f0e4125a2e84
-----------------------------------
git remote add origin git@github.com:luvres/workstation.git
git remote -v
git push -u origin master
-----------------------------------
git checkout -b testing # Criar branch
git checkout -D testing # Deletar branch
git branch		# Listar branch
git checkout testing	# Navegar pelos branchs
-----------------------------------
git stash		# Guarda alteracoes para salvar depois
git stash apply		# Salvar alteracoes
git stash list
git stash clear
-----------------------------------
git config --global alias.s status # Criar alias
-----------------------------------
git tag -a 1.0.0 -m "Release Finalizado"
git tag
git push origin master --tags
git tag -d 1.0.0	# Apagar tag no local
git push origin :1.0.0	# Apagar tag no repositorio


## Google Chrome
# ---------------
wget -c https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo dpkg -i google-chrome-stable_current_amd64.deb #&& sudo apt-get install -f

## WhatsApp
#-----------
echo "alias whatsapp='/usr/bin/google-chrome --app=https://web.whatsapp.com/'" >>$HOME/.bashrc
source $HOME/.bashrc


## asdf
# ------
git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.5
# ---------------------------------
git clone https://github.com/asdf-vm/asdf.git ~/.asdf
cd ~/.asdf
git checkout "$(git describe --abbrev=0 --tags)"
# ---------------------------------
echo -e '\n# ASDF\n. $HOME/.asdf/asdf.sh\n. $HOME/.asdf/completions/asdf.bash' >> $HOME/.bashrc
# ---------------------------------
source $HOME/.bashrc
---------------------------------
asdf update
asdf plugin-update --all
asdf plugin-list	# List installed
asdf list		# List installed and versions
asdf list node		# List installed versions
asdf list-all node	# List all available versions
---------------------------------

# NODEJS
asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git
bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring

asdf list-all nodejs
asdf install nodejs 12.13.1
asdf global nodejs 12.13.1
npm i -g npm


## VirtualBox
#-------------
wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -
---------------------------------
sudo sh -c 'echo "deb http://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib" >> /etc/apt/sources.list.d/virtualbox.list'
---------------------------------
sudo apt-get update
sudo apt install virtualbox-6.0


## Anaconda3
# -------------------
curl -L https://repo.continuum.io/archive/Anaconda3-2019.10-Linux-x86_64.sh -o Anaconda3-2019.10-Linux-x86_64.sh
---------------------------------
/bin/bash Anaconda3-2019.10-Linux-x86_64.sh -b -p $HOME/anaconda3
---------------------------------
echo -e '\n# Anaconda3\nif [ -d "$HOME/anaconda3/bin" ] ; then\n    PATH="$HOME/anaconda3/bin:$PATH"\nfi' >>$HOME/.bashrc
source $HOME/.bashrc


## Eclipse JEE
# -------------
sudo tar xf eclipse-jee-2019-09-R-linux-gtk-x86_64.tar.gz -C /opt

sudo tee /usr/share/applications/eclipse.desktop <<ATALHO
[Desktop Entry]
Version=1.0
Type=Application
Name=Eclipse JEE
Icon=/opt/eclipse/plugins/org.eclipse.epp.package.jee_4.13.0.20190917-0000/javaee-ide_x48.png
Exec="/opt/eclipse/eclipse" %f
Comment=The Drive to Develop
Categories=Development;IDE;
Terminal=false
StartupWMClass=eclipse-jee
ATALHO


## SQL Developer
# -------------
sudo tee /usr/share/applications/sqldeveloper.desktop <<ATALHO
[Desktop Entry]
Name=SQL Developer
Comment=Oracle SQL Developer
GenericName=SQL Developer for Linux
Exec=/opt/sqldeveloper/sqldeveloper.sh
Type=Application
Categories=Developer;
ATALHO


## libssl 1.0.0 (CAIXA)
# -------------
wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl1.0/libssl1.0.0_1.0.2n-1ubuntu6_amd64.deb
gdebi libssl1.0.0_1.0.2n-1ubuntu6_amd64.deb



## pySpark
# -------------------
docker run --name Spark \
--restart=always \
--publish=8888:8888 \
--mount type=bind,src=$HOME/notebooks,dst=/root/notebooks \
-d izone/spark pyspark


## TensorFlow NVIDIA
# -------------------
docker run --runtime=nvidia --name TensorFlow \
--restart=always \
--publish=8888:8888 \
--mount type=bind,src=$HOME/notebooks,dst=/root/notebooks \
-d tensorflow/tensorflow:latest-gpu-py3-jupyter \
jupyter notebook \
	--allow-root \
	--no-browser \
	--ip=0.0.0.0 \
	--port=8888 \
	--notebook-dir=/root/notebooks \
	--NotebookApp.token=''









