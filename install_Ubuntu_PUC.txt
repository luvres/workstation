sudo apt install -y \
git build-essential resolvconf curl zsh htop unrar net-tools f2fs-tools xclip tmux tree  \
default-jdk gftp vlc gimp gdebi-core papirus-icon-theme gnome-tweak-tool \
gnome-system-monitor colordiff


## Dracula Theme Terminal
# -----------------------
git clone https://github.com/GalaticStryder/gnome-terminal-colors-dracula
cd gnome-terminal-colors-dracula
./install.sh

## Oh My ZSH
# ----------
# https://github.com/JonathanRufino/bootcamp-rocketseat-ambiente-de-desenvolvimento
---------------------------------
sudo apt install zsh
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

## Spaceship Theme
# ----------------
git clone https://github.com/denysdovhan/spaceship-prompt.git "$ZSH_CUSTOM/themes/spaceship-prompt"
---------------------------------
ln -s "$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme" "$ZSH_CUSTOM/themes/spaceship.zsh-theme"
---------------------------------
sed -i '/ZSH_THEME=/s/robbyrussell/spaceship/' $HOME/.zshrc
---------------------------------
sudo chsh --shell /bin/zsh $USER
sudo usermod -s /bin/zsh $USER 
---------------------------------
cat >> $HOME/.zshrc << EOF

SPACESHIP_PROMPT_ORDER=(
  user          # Username section
  dir           # Current directory section
  host          # Hostname section
  git           # Git section (git_branch + git_status)
  hg            # Mercurial section (hg_branch  + hg_status)
  exec_time     # Execution time
  line_sep      # Line break
  vi_mode       # Vi-mode indicator
  jobs          # Background jobs indicator
  exit_code     # Exit code section
  char          # Prompt character
  #venv          # virtualenv section
)

SPACESHIP_PROMPT_ADD_NEWLINE=false
SPACESHIP_CHAR_SYMBOL="❯"
SPACESHIP_CHAR_SUFFIX=" "

# VENV
SPACESHIP_VENV_SHOW=true
SPACESHIP_VENV_PREFIX="("
SPACESHIP_VENV_SUFFIX=") "
SPACESHIP_VENV_COLOR="white"
EOF

## Zplugin
#https://github.com/zdharma/zinit
# --------
#sh -c "$(curl -fsSL https://raw.githubusercontent.com/zdharma/zplugin/master/doc/install.sh)"
sh -c "$(curl -fsSL https://raw.githubusercontent.com/zdharma/zinit/master/doc/install.sh)"
---------------------------------
echo "\nzplugin light zsh-users/zsh-autosuggestions\nzplugin light zsh-users/zsh-completions\nzplugin light zdharma/fast-syntax-highlighting" >>$HOME/.zshrc


## Docker
# --------
curl -sSL https://get.docker.com | sh
sudo usermod -aG docker $USER


## docker-compose
# ---------------
sudo rm /usr/bin/docker-compose
# -----------
sudo curl -L https://github.com/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` -o /usr/bin/docker-compose
# -----------
sudo chmod +x /usr/bin/docker-compose


## nvidia-docker2
# ----------------
curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
# ---------------------------------
distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
# ---------------------------------
curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
# ---------------------------------
sudo apt-get update
sudo apt-get install nvidia-docker2
sudo pkill -SIGHUP dockerd


## Driver NVIDIA
# ---------------
sudo su
echo -e "blacklist nouveau\noptions nouveau modeset=0" >/etc/modprobe.d/blacklist-nouveau.conf
# ---------------------------------
sudo update-initramfs -u
sudo shutdown -r now
# ---------------------------------
sudo ./NVIDIA-Linux-x86_64-440.36.run


# Tests
---------------------------------
docker run --rm --runtime=nvidia nvidia/cuda:10.2-base nvidia-smi


## git
# -----
git config --global user.name "luvres"
git config --global user.email "luvres@hotmail.com"
git config --global credential.helper 'cache --timeout=86400'
git config --list
cat ~/.gitconfig
# ---------------------------------
ssh-keygen
cat $HOME/.ssh/id_rsa.pub | xclip -sel clip # $HOME/.ssh/config
-----------------------------------
ssh-keygen -o -a 100 -t ed25519 -f .ssh/id_ed25519 -C "luvres@desktop"
cat $HOME/.ssh/id_ed25519.pub | xclip -sel clip # $HOME/.ssh/config
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
# ---------------------------------
ssh -T git@github.com
ssh -T -p443 git@ssh.github.com
# ---------------------------------
git status
# -----------
git config --global core.pager cat
git config --global core.pager less
git config --global core.editor code
git config --global --edit

git config --global alias.l '!git log --pretty=format:"%C(blue)%h%C(red)%d %C(white)%s - %C(cyan)%cn, %C(green)%cr"'
git config --global alias.lg '!git log --graph --pretty=format:"%C(blue)%h%C(red)%d %C(white)%s - %C(cyan)%cn, %C(green)%cr"'
git config --global alias.cc '!git add --all && git commit -m'
git config --global alias.s '!git status -s'
git config --global alias.amend '!git add --all && git commit --amend --no-edit'
git config --global alias.count '!git shortlog -s --grep'

git config --global push.followTags true
# ---------------------------------
yarn add -D git-commit-msg-linter
yarn add -D typescript @types/node ## tsconfig.json
yarn add -D \
	eslint \
	eslint-config-standard-with-typescript@11 \
	eslint-plugin-import \
	eslint-plugin-node \
	eslint-plugin-promise \
	eslint-plugin-standard \
	@typescript-eslint/eslint-plugin ## eslintrc.json .eslintignore
yarn add -D lint-staged husky ## .lintstagedrc.json .huskyrc.json
yarn add -D jest @types/jest ts-jest ## jest.config.js
# ---------------------------------
git log
git log -2 # Dois ultimos commits 
git log --oneline
git log --graph
git shortlog
# -----------
git log --before='2020-01-25' # Por data anterior
git log --after='2020-01-25'  # Por data posterior
git log --since='10 days ago' # '1 week ago' '1 month ago'
git log --author='luvres'
# -----------
git diff
git diff --staged
git diff c5181e4..0e6dde4
# -----------
git checkout -d feature/pipeline
git push origin --delete feature/pipeline
# -----------
git restore --staged arq.txt # Desfazer commit do arquivo
git checkout arq.txt # Desfazer alteracoes do arquivo
# -----------
git reset HEAD~1 --soft  ## Desfaz até commit anterior
git reset HEAD~1 --mixed ## Desfaz até add anterior (default)
git reset HEAD~1 --hard  ## Desfaz tudo
# -----------
git show 044b477cfce2d7ce257f93177aabbf7e9c5a6a9b
git checkout README.md # Retorna o arquivo para antes da edicao
git reset soft --mixed --hard 4362afa37fc7bc61dc7529eb0ff9f0e4125a2e84
git revert 4362afa37fc7bc61dc7529eb0ff9f0e4125a2e84
-----------------------------------
git remote add origin git@github.com:luvres/workstation.git
git remote -v
git push -u origin master
-----------------------------------
git checkout -b testing # Criar branch
git checkout -D testing # Deletar branch
git branch		# Listar branch
git checkout testing	# Navegar pelos branchs
-----------------------------------
git stash		# Guarda alteracoes para salvar depois
git stash apply		# Salvar alteracoes
git stash list
git stash clear
-----------------------------------
git config --global alias.s status # Criar alias
-----------------------------------
git tag -a 1.0.0 -m "Release Finalizado"
git tag
git push origin master --tags
git tag -d 1.0.0	# Apagar tag no local
git push origin :1.0.0	# Apagar tag no repositorio


## Google Chrome
# ---------------
wget -c https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo dpkg -i google-chrome-stable_current_amd64.deb #&& sudo apt-get install -f

## WhatsApp
#-----------
echo "alias whatsapp='/usr/bin/google-chrome --app=https://web.whatsapp.com/'" >>$HOME/.zshrc
source $HOME/.zshrc


## asdf
# ------
git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.5
# ---------------------------------
git clone https://github.com/asdf-vm/asdf.git ~/.asdf
cd ~/.asdf
git checkout "$(git describe --abbrev=0 --tags)"
# ---------------------------------
echo -e '\n# ASDF\n. $HOME/.asdf/asdf.sh\n. $HOME/.asdf/completions/asdf.bash' >> $HOME/.zshrc
# ---------------------------------
source $HOME/.zshrc
---------------------------------
asdf update
asdf plugin-update --all
asdf plugin-list	# List installed
asdf list		# List installed and versions
asdf list node		# List installed versions
asdf list-all node	# List all available versions
---------------------------------

# NODEJS
asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git
bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
# -----------
asdf list-all nodejs
asdf install nodejs 12.17.0
asdf global nodejs 12.17.0
npm i -g npm

# DENO
asdf plugin-add deno https://github.com/asdf-community/asdf-deno.git
# -----------
asdf list-all deno
asdf install deno 1.0.3
asdf global deno 1.0.3
deno --version

# YARN
asdf plugin-add yarn
# -----------
asdf list-all yarn
asdf install yarn 1.22.4
asdf install yarn latest
asdf global yarn 1.22.4



## VirtualBox
#-------------
wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -
---------------------------------
sudo sh -c 'echo "deb http://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib" >> /etc/apt/sources.list.d/virtualbox.list'
---------------------------------
sudo apt-get update
sudo apt install virtualbox-6.0


## Anaconda3
# -------------------
curl -L https://repo.anaconda.com/archive/https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh
---------------------------------
/bin/bash Anaconda3-2020.02-Linux-x86_64.sh -b -p $HOME/anaconda3
---------------------------------
cat >> $HOME/.zshrc <<EOF

# >>> conda init >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="\$(CONDA_REPORT_ERRORS=false '\$HOME/anaconda3/bin/conda' shell.bash hook 2> /dev/null)"
if [ \$? -eq 0 ]; then
    \eval "\$__conda_setup"
else
    if [ -f "\$HOME/anaconda3/etc/profile.d/conda.sh" ]; then
        . "\$HOME/anaconda3/etc/profile.d/conda.sh"
        CONDA_CHANGEPS1=false conda activate base
    else
        \export PATH="\$HOME/anaconda3/bin:\$PATH"
    fi
fi
unset __conda_setup
# <<< conda init <<<
EOF

conda config --set auto_activate_base true
conda config --set auto_activate_base false


## Gedit dockerfile
# -----------------
sudo curl -L https://raw.githubusercontent.com/mrorgues/gedit-xed-docker-syntax-highlighting/master/docker.lang -o /usr/share/gtksourceview-4/language-specs/docker.lang


## Spring Tool Suite
# ------------------
sudo tar -xf spring-tool-suite-4-4.4.2.RELEASE-e4.13.0-linux.gtk.x86_64.tar.gz -C /opt

sudo tee /usr/share/applications/sts.desktop <<ATALHO
[Desktop Entry]
Version=1.0
Type=Application
Name=Spring Tool Suite 4
Icon=/opt/sts-4.4.2.RELEASE/icon.xpm
Exec="/opt/sts-4.4.2.RELEASE/SpringToolSuite4" %f
Comment=The Drive to Develop
Categories=Development;IDE;
Terminal=false
StartupWMClass=sts-4
ATALHO


## Eclipse JEE
# -------------
sudo tar xf eclipse-jee-2020-03-R-incubation-linux-gtk-x86_64.tar.gz -C /opt

sudo tee /usr/share/applications/eclipse.desktop <<ATALHO
[Desktop Entry]
Version=1.0
Type=Application
Name=Eclipse JEE
Icon=/opt/eclipse/plugins/org.eclipse.epp.package.jee_4.15.0.20200313-1200/javaee-ide_x48.png
Exec="/opt/eclipse/eclipse" %f
Comment=The Drive to Develop
Categories=Development;IDE;
Terminal=false
StartupWMClass=eclipse-jee
ATALHO


## SQL Developer
# -------------
sudo tee /usr/share/applications/sqldeveloper.desktop <<ATALHO
[Desktop Entry]
Name=SQL Developer
Comment=Oracle SQL Developer
GenericName=SQL Developer for Linux
Exec=/opt/sqldeveloper/sqldeveloper.sh
Type=Application
Categories=Developer;
ATALHO


## libssl 1.0.0 (CAIXA)
# -------------
wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl1.0/libssl1.0.0_1.0.2n-1ubuntu6_amd64.deb
gdebi libssl1.0.0_1.0.2n-1ubuntu6_amd64.deb


## Dia (Network icon)
# ----
#https://xunilresu.wordpress.com/2011/09/03/cool-network-icon-for-dia/
curl http://izone.changeip.org:8081/Workstation/rib-network-v0.1.tar.gz | sudo tar zxf - -C /usr/share/dia



## pySpark
# -------------------
docker run --name Spark \
--restart=always \
--publish=8888:8888 \
--mount type=bind,src=$HOME/notebooks,dst=/root/notebooks \
-d izone/spark pyspark


## TensorFlow NVIDIA
# -------------------
docker run --runtime=nvidia --name TensorFlow \
--restart=always \
--publish=8888:8888 \
--mount type=bind,src=$HOME/notebooks,dst=/root/notebooks \
-d tensorflow/tensorflow:latest-gpu-py3-jupyter \
jupyter notebook \
	--allow-root \
	--no-browser \
	--ip=0.0.0.0 \
	--port=8888 \
	--notebook-dir=/root/notebooks \
	--NotebookApp.token=''


## Docker SSH -X
# --------------
# https://stackoverflow.com/questions/48235040/run-x-application-in-a-docker-container-reliably-on-a-server-connected-via-ssh-w
# X11PORT=`echo $DISPLAY | sed 's/^[^:]*:\([^\.]\+\).*/\1/'`
# TCPPORT=`expr 6000 + $X11PORT`
# sudo ufw allow from 172.17.0.0/16 to any port $TCPPORT proto tcp 
# sudo chown $USER /tmp/.docker.xauth
# sudo chmod 600 /tmp/.docker.xauth

# QEMU
sudo docker run --rm --privileged multiarch/qemu-user-static:register

ssh workstation -X

#sudo apt install x11-xserver-utils x11-apps

xhost local:root

docker run --rm --name XClock \
--net=host \
-e DISPLAY=$DISPLAY \
-v /tmp/.X11-unix:/tmp/.X11-unix \
-v $HOME/.Xauthority:/root/.Xauthority \
-ti alpine ash -c "apk add --no-cache --update xeyes && xeyes"



